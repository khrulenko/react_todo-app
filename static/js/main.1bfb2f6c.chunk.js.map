{"version":3,"sources":["context.jsx","components/TodoItem/TodoItem.jsx","components/ToDoList/ToDoList.jsx","components/Footer/Footer.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","changeTodoStatus","useContext","removeTodo","key","id","className","completed","type","checked","onChange","title","onClick","ToDoList","toDosToShow","map","Footer","listOfToDos","setListOfToDos","notCompletedToDos","statusToShow","filterTodosByStatus","length","href","onKeyDown","event","preventDefault","App","useState","setToDosToShow","setNotCompletedToDos","newToDoTitle","setNewToDoTitle","setStatusToShow","useEffect","filter","changeAllTodosStatus","statusToSet","Provider","value","todoId","placeholder","target","trim","prevState","Date","htmlFor","statusToFilterBy","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bfb2f6c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\n\nexport const TodoItem = ({ todo }) => {\n  const { changeTodoStatus } = useContext(Context);\n  const { removeTodo } = useContext(Context);\n\n  return (\n    <>\n      <li\n        key={todo.id}\n        className={todo.completed ? 'completed' : ''}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => changeTodoStatus(todo.id)}\n          />\n          <label>{todo.title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    </>\n  );\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const ToDoList = ({\n  toDosToShow\n}) => {\n\n\n  return (\n    <ul className=\"todo-list\">\n      {toDosToShow.map(todo => (\n       <TodoItem todo={todo}/>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport const Footer = ({\n  listOfToDos,\n  setListOfToDos,\n  notCompletedToDos,\n  statusToShow,\n  filterTodosByStatus,\n}) => {\n\n  return (\n    <footer className=\"footer\">\n\n      <span className=\"todo-count\">\n        {notCompletedToDos.length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={statusToShow === 'all' ? 'selected' : ''}\n            onClick={() => filterTodosByStatus()}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              filterTodosByStatus(true);\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={\n              (statusToShow === 'active'\n                && notCompletedToDos.length > 0\n              )\n                ? 'selected'\n                : ''\n            }\n            onClick={() => filterTodosByStatus(false)}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              filterTodosByStatus(true);\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={\n              (statusToShow === 'completed'\n                && notCompletedToDos.length !== listOfToDos.length\n              )\n                ? 'selected'\n                : ''\n            }\n            onClick={() => filterTodosByStatus(true)}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              filterTodosByStatus(true);\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {(notCompletedToDos.length !== listOfToDos.length) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => setListOfToDos(notCompletedToDos)}\n        >\n          Clear completed\n        </button>\n      )}\n\n    </footer>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ToDoList } from './components/ToDoList';\nimport { Footer } from './components/Footer';\nimport { Context } from './context';\n\nexport function App() {\n  const [listOfToDos, setListOfToDos] = useState([]);\n  const [toDosToShow, setToDosToShow] = useState(listOfToDos);\n  const [notCompletedToDos, setNotCompletedToDos] = useState([]);\n  const [newToDoTitle, setNewToDoTitle] = useState('');\n  const [statusToShow, setStatusToShow] = useState('all');\n\n  useEffect(() => {\n    setNotCompletedToDos(\n      listOfToDos.filter(todo => todo.completed === false),\n    );\n\n    setToDosToShow(listOfToDos);\n  }, [listOfToDos]);\n\n  function addTodo(event) {\n    if (newToDoTitle.trim().length > 0) {\n      setListOfToDos(prevState => [\n        ...listOfToDos,\n        { title: newToDoTitle, id: +new Date(), completed: false },\n      ]);\n      setNewToDoTitle('');\n    }\n  }\n\n  const changeTodoStatus = (todoId) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeAllTodosStatus = (statusToSet) => {\n    setListOfToDos(listOfToDos.map(\n      todo => ({ ...todo, completed: statusToSet }),\n    ));\n  };\n\n  const filterTodosByStatus = (statusToFilterBy) => {\n    if (statusToFilterBy === undefined) {\n      setToDosToShow(listOfToDos);\n      setStatusToShow('all');\n    } else {\n      setToDosToShow(listOfToDos.filter(\n        todo => todo.completed === statusToFilterBy,\n      ));\n      if (statusToFilterBy) {\n        setStatusToShow('completed');\n      } else {\n        setStatusToShow('active');\n      }\n    }\n  };\n\n  const removeTodo = (todoId) => {\n    setListOfToDos(listOfToDos.filter(todo => todo.id !== todoId));\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        changeTodoStatus,\n        removeTodo,\n      }}\n    >\n\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newToDoTitle}\n              onChange={event => setNewToDoTitle(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  event.preventDefault();\n                  addTodo(event);\n                }\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n\n          {(\n            (notCompletedToDos.length === 0\n              && listOfToDos.length !== 0)\n            || (notCompletedToDos.length === listOfToDos.length\n                && listOfToDos.length !== 0)\n          ) && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={notCompletedToDos.length === 0}\n                onChange={() => {\n                  if (notCompletedToDos.length === 0) {\n                    changeAllTodosStatus(false);\n                  } else {\n                    changeAllTodosStatus(true);\n                  }\n                }}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <ToDoList\n            toDosToShow={toDosToShow}\n          />\n\n        </section>\n        {listOfToDos.length > 0 && (\n          <Footer\n            listOfToDos={listOfToDos}\n            setListOfToDos={setListOfToDos}\n            notCompletedToDos={notCompletedToDos}\n            statusToShow={statusToShow}\n            filterTodosByStatus={filterTodosByStatus}\n          />\n        )}\n      </section>\n\n    </Context.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}