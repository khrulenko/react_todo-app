{"version":3,"sources":["context.jsx","components/TodoItem/TodoItem.jsx","components/ToDoList/ToDoList.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","toDosToShow","changeTodoStatus","useContext","map","todo","key","id","className","completed","type","checked","onChange","title","ToDoList","App","useState","listOfToDos","setListOfToDos","setToDosToShow","notCompletedToDos","setNotCompletedToDos","newToDoTitle","setNewToDoTitle","statusToShow","setStatusToShow","useEffect","filter","changeAllTodosStatus","statusToSet","filterTodosByStatus","statusToFilterBy","undefined","Provider","value","todoId","placeholder","event","target","onKeyDown","preventDefault","trim","length","prevState","Date","htmlFor","href","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ddf5491.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\n\nexport const TodoItem = ({ toDosToShow }) => {\n  const { changeTodoStatus } = useContext(Context);\n\n  return (\n    <>\n      {toDosToShow.map(todo => (\n        <li\n          key={todo.id}\n          className={todo.completed ? 'completed' : ''}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={() => changeTodoStatus(todo.id)}\n            />\n            <label>{todo.title}</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      ))}\n    </>\n  );\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const ToDoList = ({\n  toDosToShow\n}) => {\n\n\n  return (\n    <ul className=\"todo-list\">\n      <TodoItem toDosToShow={toDosToShow}/>\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ToDoList } from './components/ToDoList';\nimport { Context } from './context';\n\nexport function App() {\n  const [listOfToDos, setListOfToDos] = useState([]);\n  const [toDosToShow, setToDosToShow] = useState(listOfToDos);\n  const [notCompletedToDos, setNotCompletedToDos] = useState([]);\n  const [newToDoTitle, setNewToDoTitle] = useState('');\n  const [statusToShow, setStatusToShow] = useState('all');\n\n  useEffect(() => {\n    setNotCompletedToDos(\n      listOfToDos.filter(todo => todo.completed === false),\n    );\n\n    setToDosToShow(listOfToDos);\n  }, [listOfToDos]);\n\n  function addTodo(event) {\n    if (newToDoTitle.trim().length > 0) {\n      setListOfToDos(prevState => [\n        ...listOfToDos,\n        { title: newToDoTitle, id: +new Date(), completed: false },\n      ]);\n      setNewToDoTitle('');\n    }\n  }\n\n  const changeTodoStatus = (todoId) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeAllTodosStatus = (statusToSet) => {\n    setListOfToDos(listOfToDos.map(\n      todo => ({ ...todo, completed: statusToSet }),\n    ));\n  };\n\n  const filterTodosByStatus = (statusToFilterBy) => {\n    if (statusToFilterBy === undefined) {\n      setToDosToShow(listOfToDos);\n      setStatusToShow('all');\n    } else {\n      setToDosToShow(listOfToDos.filter(\n        todo => todo.completed === statusToFilterBy,\n      ));\n      if (statusToFilterBy) {\n        setStatusToShow('completed');\n      } else {\n        setStatusToShow('active');\n      }\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        changeTodoStatus,\n      }}\n    >\n\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newToDoTitle}\n              onChange={event => setNewToDoTitle(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  event.preventDefault();\n                  addTodo(event);\n                }\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n\n          {(\n            (notCompletedToDos.length === 0\n              && listOfToDos.length !== 0)\n            || (notCompletedToDos.length === listOfToDos.length\n                && listOfToDos.length !== 0)\n          ) && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={notCompletedToDos.length === 0}\n                onChange={() => {\n                  if (notCompletedToDos.length === 0) {\n                    changeAllTodosStatus(false);\n                  } else {\n                    changeAllTodosStatus(true);\n                  }\n                }}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <ToDoList\n            toDosToShow={toDosToShow}\n          />\n\n        </section>\n\n        {listOfToDos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {notCompletedToDos.length}\n              {' '}\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={statusToShow === 'all' ? 'selected' : ''}\n                  onClick={() => filterTodosByStatus()}\n                  onKeyDown={(event) => {\n                    event.preventDefault();\n                    filterTodosByStatus(true);\n                  }}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={\n                    (statusToShow === 'active'\n                      && notCompletedToDos.length > 0\n                    )\n                      ? 'selected'\n                      : ''\n                  }\n                  onClick={() => filterTodosByStatus(false)}\n                  onKeyDown={(event) => {\n                    event.preventDefault();\n                    filterTodosByStatus(true);\n                  }}\n                >\n                  Active\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={\n                    (statusToShow === 'completed'\n                      && notCompletedToDos.length !== listOfToDos.length\n                    )\n                      ? 'selected'\n                      : ''\n                  }\n                  onClick={() => filterTodosByStatus(true)}\n                  onKeyDown={(event) => {\n                    event.preventDefault();\n                    filterTodosByStatus(true);\n                  }}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n\n            {(notCompletedToDos.length !== listOfToDos.length) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setListOfToDos(notCompletedToDos)}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        )}\n\n      </section>\n\n    </Context.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}