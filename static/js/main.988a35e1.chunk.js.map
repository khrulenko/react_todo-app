{"version":3,"sources":["context.jsx","components/TodoItem/TodoItem.jsx","components/ToDoList/ToDoList.jsx","components/Footer/Footer.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","changeTodoStatus","useContext","removeTodo","changeTodoTitle","useState","isBeingEdited","setIsBeingEdited","title","newTitleToSet","setNewTitleToSet","key","id","className","completed","type","checked","onChange","onDoubleClick","onClick","value","event","target","onKeyDown","preventDefault","trim","length","onBlur","ToDoList","toDosToShow","map","Footer","listOfToDos","setListOfToDos","notCompletedToDos","statusToShow","setStatusToShow","href","App","setToDosToShow","setNotCompletedToDos","newToDoTitle","setNewToDoTitle","useEffect","filter","changeAllTodosStatus","statusToSet","Provider","todoId","placeholder","prevState","Date","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.988a35e1.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Context } from '../../context';\n\nexport const TodoItem = ({ todo }) => {\n  const { changeTodoStatus } = useContext(Context);\n  const { removeTodo } = useContext(Context);\n  const { changeTodoTitle } = useContext(Context);\n\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\n  const [titleInputValue, setTitleInputValue] = useState(todo.title);\n  const [newTitleToSet, setNewTitleToSet] = useState(todo.title);\n\n  return (\n    <>\n      <li\n        key={todo.id}\n        className={(\n          todo.completed ? 'completed' : ''\n          ) + (\n            isBeingEdited ? ' editing ' : ''\n        )}\n      >\n\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => changeTodoStatus(todo.id)}\n          />\n          <label\n            onDoubleClick={() => setIsBeingEdited(true)}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(todo.id)}\n          />\n        </div>\n\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={newTitleToSet}\n          onChange={(event) => setNewTitleToSet(event.target.value)}\n\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              if (newTitleToSet.trim().length > 0) {\n                changeTodoTitle(todo.id, newTitleToSet);\n              } else {\n                setNewTitleToSet(todo.title);\n              }\n              setIsBeingEdited(false);\n            }\n\n            if (event.key === 'Escape') {\n              setIsBeingEdited(false);\n            }\n          }}\n\n          onBlur={(event) => {\n            if (newTitleToSet.trim().length > 0) {\n              changeTodoTitle(todo.id, newTitleToSet);\n            } else {\n              setNewTitleToSet(todo.title);\n            }\n            setIsBeingEdited(false);\n\n            if (event.key === 'Escape') {\n              setIsBeingEdited(false);\n            }\n          }}\n        />\n\n      </li>\n    </>\n  );\n}\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const ToDoList = ({\n  toDosToShow\n}) => {\n\n\n  return (\n    <ul className=\"todo-list\">\n      {toDosToShow.map(todo => (\n       <TodoItem todo={todo}/>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport const Footer = ({\n  listOfToDos,\n  setListOfToDos,\n  notCompletedToDos,\n  statusToShow,\n  setStatusToShow,\n}) => {\n\n  return (\n    <footer className=\"footer\">\n\n      <span className=\"todo-count\">\n        {notCompletedToDos.length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={statusToShow === 'all' ? 'selected' : ''}\n            onClick={() => setStatusToShow('all')}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              setStatusToShow('all');\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={\n              (statusToShow === 'active'\n              )\n                ? 'selected'\n                : ''\n            }\n            onClick={() => setStatusToShow('active')}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              setStatusToShow('active');\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={\n              (statusToShow === 'completed'\n              )\n                ? 'selected'\n                : ''\n            }\n            onClick={() => setStatusToShow('completed')}\n            onKeyDown={(event) => {\n              event.preventDefault();\n              setStatusToShow('completed');\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {(notCompletedToDos.length !== listOfToDos.length) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => setListOfToDos(notCompletedToDos)}\n        >\n          Clear completed\n        </button>\n      )}\n\n    </footer>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ToDoList } from './components/ToDoList';\nimport { Footer } from './components/Footer';\nimport { Context } from './context';\n\nexport function App() {\n  const [listOfToDos, setListOfToDos] = useState([]);\n  const [toDosToShow, setToDosToShow] = useState(listOfToDos);\n  const [notCompletedToDos, setNotCompletedToDos] = useState([]);\n  const [newToDoTitle, setNewToDoTitle] = useState('');\n  const [statusToShow, setStatusToShow] = useState('all');\n\n  useEffect(() => {\n    setNotCompletedToDos(\n      listOfToDos.filter(todo => todo.completed === false),\n    );\n\n    setToDosToShow(listOfToDos);\n  }, [listOfToDos]);\n\n  function addTodo(event) {\n    if (newToDoTitle.trim().length > 0) {\n      setListOfToDos(prevState => [\n        ...listOfToDos,\n        { title: newToDoTitle, id: +new Date(), completed: false },\n      ]);\n      setNewToDoTitle('');\n    }\n  }\n\n  const changeTodoStatus = (todoId) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeTodoTitle = (todoId, newTitleToSet) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, title: newTitleToSet };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeAllTodosStatus = (statusToSet) => {\n    setListOfToDos(listOfToDos.map(\n      todo => ({ ...todo, completed: statusToSet }),\n    ));\n\n    if (statusToShow !== 'all') {\n      if (statusToSet) {\n        setStatusToShow('completed');\n      } else {\n        setStatusToShow('active');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (statusToShow === 'all') {\n      setToDosToShow(listOfToDos);\n    } else if (statusToShow === 'active') {\n      setToDosToShow(listOfToDos.filter(\n        todo => todo.completed === false,\n      ));\n    } else {\n      setToDosToShow(listOfToDos.filter(\n        todo => todo.completed === true,\n      ));\n    }\n  }, [statusToShow, listOfToDos]);\n\n  const removeTodo = (todoId) => {\n    setListOfToDos(listOfToDos.filter(todo => todo.id !== todoId));\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        changeTodoStatus,\n        removeTodo,\n        changeTodoTitle,\n      }}\n    >\n\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newToDoTitle}\n              onChange={event => setNewToDoTitle(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  event.preventDefault();\n                  addTodo(event);\n                }\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n\n          {(\n            (notCompletedToDos.length === 0\n              && listOfToDos.length !== 0)\n            || (notCompletedToDos.length === listOfToDos.length\n                && listOfToDos.length !== 0)\n          ) && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={notCompletedToDos.length === 0}\n                onChange={() => {\n                  if (notCompletedToDos.length === 0) {\n                    changeAllTodosStatus(false);\n                  } else {\n                    changeAllTodosStatus(true);\n                  }\n                }}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <ToDoList\n            toDosToShow={toDosToShow}\n          />\n\n        </section>\n        {listOfToDos.length > 0 && (\n          <Footer\n            listOfToDos={listOfToDos}\n            setListOfToDos={setListOfToDos}\n            notCompletedToDos={notCompletedToDos}\n            statusToShow={statusToShow}\n            setStatusToShow={setStatusToShow}\n          />\n        )}\n      </section>\n\n    </Context.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}