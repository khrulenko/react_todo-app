{"version":3,"sources":["context.jsx","components/TodoItem/TodoItem.jsx","components/ToDoList/ToDoList.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","toDosToShow","changeTodoStatus","useContext","map","todo","key","id","className","completed","type","checked","onChange","title","ToDoList","listOfToDos","useState","setToDosToShow","useEffect","App","setListOfToDos","notCompletedToDos","setNotCompletedToDos","newToDoTitle","setNewToDoTitle","filter","Provider","value","todoId","placeholder","event","target","onKeyDown","preventDefault","prevState","Date","addTodo","htmlFor","length","href","onClick","ReactDOM","render","document","getElementById"],"mappings":"2SAEaA,EAAUC,IAAMC,gBCChBC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjBC,EAAqBC,qBAAWN,GAAhCK,iBAER,OACE,oCACGD,EAAYG,KAAI,SAAAC,GAAI,OACnB,wBACEC,IAAKD,EAAKE,GACVC,UAAWH,EAAKI,UAAY,YAAc,IAE1C,yBAAKD,UAAU,QACb,2BACEE,KAAK,WACLF,UAAU,SACVG,QAASN,EAAKI,UACdG,SAAU,kBAAMV,EAAiBG,EAAKE,OAExC,+BAAQF,EAAKQ,OACb,4BAAQH,KAAK,SAASF,UAAU,aAElC,2BAAOE,KAAK,OAAOF,UAAU,eCpB1BM,EAAW,SAAC,GAElB,IADLC,EACI,EADJA,YACI,EACkCC,mBAASD,GAD3C,mBACGd,EADH,KACgBgB,EADhB,KAOJ,OAJAC,qBAAU,WACRD,EAAeF,KACd,CAACA,IAGF,wBAAIP,UAAU,aACZ,kBAAC,EAAD,CAAUP,YAAaA,MCyFdkB,MAnGf,WAAgB,IAAD,EACyBH,mBAAS,IADlC,mBACND,EADM,KACOK,EADP,OAEqCJ,mBAAS,IAF9C,mBAENK,EAFM,KAEaC,EAFb,OAG2BN,mBAAS,IAHpC,mBAGNO,EAHM,KAGQC,EAHR,KA+Bb,OA1BAN,qBAAU,WACRI,EACEP,EAAYU,QAAO,SAAApB,GAAI,OAAuB,IAAnBA,EAAKI,gBAEjC,CAACM,IAuBF,kBAAClB,EAAQ6B,SAAT,CACEC,MAAO,CACLzB,iBAbmB,SAAC0B,GACxBR,EAAeL,EAAYX,KAAI,SAACC,GAC9B,OAAIA,EAAKE,KAAOqB,EACP,2BAAKvB,GAAZ,IAAkBI,WAAYJ,EAAKI,YAG9BJ,SAUP,6BAASG,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,8BACE,2BACEE,KAAK,OACLF,UAAU,WACVqB,YAAY,yBACZF,MAAOJ,EACPX,SAAU,SAAAkB,GAAK,OAAIN,EAAgBM,EAAMC,OAAOJ,QAChDK,UAAW,SAACF,IApCxB,SAAiBA,GACG,UAAdA,EAAMxB,MACRwB,EAAMG,iBACNb,GAAe,SAAAc,GAAS,4BACnBnB,GADmB,CAEtB,CAAEF,MAAOU,EAAchB,IAAK,IAAI4B,KAAQ1B,WAAW,SAgC3C2B,CAAQN,QAMhB,6BAAStB,UAAU,QAEjB,2BAAOE,KAAK,WAAWH,GAAG,aAAaC,UAAU,eACjD,2BAAO6B,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CACEtB,YAAaA,KAKjB,4BAAQP,UAAU,UAChB,0BAAMA,UAAU,cACba,EAAkBiB,OAClB,IAFH,cAMA,wBAAI9B,UAAU,WACZ,4BACE,uBAAG+B,KAAK,KAAK/B,UAAU,YAAvB,QAGF,4BACE,uBAAG+B,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BACE7B,KAAK,SACLF,UAAU,kBACVgC,QAAS,kBAAMpB,EAAeC,KAHhC,uBCjFVoB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f0a5ab66.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\n\nexport const TodoItem = ({ toDosToShow }) => {\n  const { changeTodoStatus } = useContext(Context);\n\n  return (\n    <>\n      {toDosToShow.map(todo => (\n        <li\n          key={todo.id}\n          className={todo.completed ? 'completed' : ''}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={() => changeTodoStatus(todo.id)}\n            />\n            <label>{todo.title}</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      ))}\n    </>\n  );\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const ToDoList = ({\n  listOfToDos\n}) => {\n  const [toDosToShow, setToDosToShow] = useState(listOfToDos);\n\n  useEffect(() => {\n    setToDosToShow(listOfToDos);\n  }, [listOfToDos]);\n\n  return (\n    <ul className=\"todo-list\">\n      <TodoItem toDosToShow={toDosToShow}/>\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ToDoList } from './components/ToDoList';\nimport { Context } from './context';\n\nfunction App() {\n  const [listOfToDos, setListOfToDos] = useState([]);\n  const [notCompletedToDos, setNotCompletedToDos] = useState([]);\n  const [newToDoTitle, setNewToDoTitle] = useState('');\n\n  useEffect(() => {\n    setNotCompletedToDos(\n      listOfToDos.filter(todo => todo.completed === false),\n    );\n  }, [listOfToDos]);\n\n  function addTodo(event) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setListOfToDos(prevState => [\n        ...listOfToDos,\n        { title: newToDoTitle, id: +new Date(), completed: false },\n      ]);\n    }\n  }\n\n  const changeTodoStatus = (todoId) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        changeTodoStatus,\n      }}\n    >\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newToDoTitle}\n              onChange={event => setNewToDoTitle(event.target.value)}\n              onKeyDown={(event) => {\n                addTodo(event);\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n\n          <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ToDoList\n            listOfToDos={listOfToDos}\n          />\n\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {notCompletedToDos.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a href=\"#/\" className=\"selected\">All</a>\n            </li>\n\n            <li>\n              <a href=\"#/active\">Active</a>\n            </li>\n\n            <li>\n              <a href=\"#/completed\">Completed</a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => setListOfToDos(notCompletedToDos)}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}