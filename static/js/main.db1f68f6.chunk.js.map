{"version":3,"sources":["context.jsx","components/TodoItem/TodoItem.jsx","components/ToDoList/ToDoList.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","toDosToShow","changeTodoStatus","useContext","map","todo","key","id","className","completed","type","checked","onChange","title","ToDoList","listOfToDos","useState","setToDosToShow","useEffect","App","setListOfToDos","notCompletedToDos","setNotCompletedToDos","newToDoTitle","setNewToDoTitle","filter","changeAllTodosStatus","statusToSet","Provider","value","todoId","placeholder","event","target","onKeyDown","trim","length","preventDefault","prevState","Date","addTodo","htmlFor","href","onClick","ReactDOM","render","document","getElementById"],"mappings":"2SAEaA,EAAUC,IAAMC,gBCChBC,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjBC,EAAqBC,qBAAWN,GAAhCK,iBAER,OACE,oCACGD,EAAYG,KAAI,SAAAC,GAAI,OACnB,wBACEC,IAAKD,EAAKE,GACVC,UAAWH,EAAKI,UAAY,YAAc,IAE1C,yBAAKD,UAAU,QACb,2BACEE,KAAK,WACLF,UAAU,SACVG,QAASN,EAAKI,UACdG,SAAU,kBAAMV,EAAiBG,EAAKE,OAExC,+BAAQF,EAAKQ,OACb,4BAAQH,KAAK,SAASF,UAAU,aAElC,2BAAOE,KAAK,OAAOF,UAAU,eCpB1BM,EAAW,SAAC,GAElB,IADLC,EACI,EADJA,YACI,EACkCC,mBAASD,GAD3C,mBACGd,EADH,KACgBgB,EADhB,KAOJ,OAJAC,qBAAU,WACRD,EAAeF,KACd,CAACA,IAGF,wBAAIP,UAAU,aACZ,kBAAC,EAAD,CAAUP,YAAaA,MCVtB,SAASkB,IAAO,IAAD,EACkBH,mBAAS,IAD3B,mBACbD,EADa,KACAK,EADA,OAE8BJ,mBAAS,IAFvC,mBAEbK,EAFa,KAEMC,EAFN,OAGoBN,mBAAS,IAH7B,mBAGbO,EAHa,KAGCC,EAHD,KAKpBN,qBAAU,WACRI,EACEP,EAAYU,QAAO,SAAApB,GAAI,OAAuB,IAAnBA,EAAKI,gBAEjC,CAACM,IAWJ,IAUMW,EAAuB,SAACC,GAC5BP,EAAeL,EAAYX,KACzB,SAAAC,GAAI,kCAAUA,GAAV,IAAgBI,UAAWkB,SAInC,OACE,kBAAC9B,EAAQ+B,SAAT,CACEC,MAAO,CACL3B,iBAnBmB,SAAC4B,GACxBV,EAAeL,EAAYX,KAAI,SAACC,GAC9B,OAAIA,EAAKE,KAAOuB,EACP,2BAAKzB,GAAZ,IAAkBI,WAAYJ,EAAKI,YAG9BJ,SAiBP,6BAASG,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,8BACE,2BACEE,KAAK,OACLF,UAAU,WACVuB,YAAY,yBACZF,MAAON,EACPX,SAAU,SAAAoB,GAAK,OAAIR,EAAgBQ,EAAMC,OAAOJ,QAChDK,UAAW,SAACF,GACQ,UAAdA,EAAM1B,KAAmBiB,EAAaY,OAAOC,OAAS,GA3CxE,SAAiBJ,GACfA,EAAMK,iBACNjB,GAAe,SAAAkB,GAAS,4BACnBvB,GADmB,CAEtB,CAAEF,MAAOU,EAAchB,IAAK,IAAIgC,KAAQ9B,WAAW,QAErDe,EAAgB,IAsCFgB,CAAQR,QAOlB,6BAASxB,UAAU,SAGe,IAA7Ba,EAAkBe,QACS,IAAvBrB,EAAYqB,QACbf,EAAkBe,SAAWrB,EAAYqB,QACf,IAAvBrB,EAAYqB,SAEnB,oCACE,2BACE1B,KAAK,WACLH,GAAG,aACHC,UAAU,aACVI,SAAU,WACyB,IAA7BS,EAAkBe,OACpBV,GAAqB,GAErBA,GAAqB,MAI3B,2BAAOe,QAAQ,cAAf,yBAIJ,kBAAC,EAAD,CACE1B,YAAaA,KAKhBA,EAAYqB,OAAS,GACpB,4BAAQ5B,UAAU,UAChB,0BAAMA,UAAU,cACba,EAAkBe,OAClB,IAFH,cAMA,wBAAI5B,UAAU,WACZ,4BACE,uBAAGkC,KAAK,KAAKlC,UAAU,YAAvB,QAGF,4BACE,uBAAGkC,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIFrB,EAAkBe,SAAWrB,EAAYqB,QACzC,4BACE1B,KAAK,SACLF,UAAU,kBACVmC,QAAS,kBAAMvB,EAAeC,KAHhC,sBC/GduB,IAASC,OACP,kBAAC1B,EAAD,MACA2B,SAASC,eAAe,W","file":"static/js/main.db1f68f6.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\n\nexport const TodoItem = ({ toDosToShow }) => {\n  const { changeTodoStatus } = useContext(Context);\n\n  return (\n    <>\n      {toDosToShow.map(todo => (\n        <li\n          key={todo.id}\n          className={todo.completed ? 'completed' : ''}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={() => changeTodoStatus(todo.id)}\n            />\n            <label>{todo.title}</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      ))}\n    </>\n  );\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const ToDoList = ({\n  listOfToDos\n}) => {\n  const [toDosToShow, setToDosToShow] = useState(listOfToDos);\n\n  useEffect(() => {\n    setToDosToShow(listOfToDos);\n  }, [listOfToDos]);\n\n  return (\n    <ul className=\"todo-list\">\n      <TodoItem toDosToShow={toDosToShow}/>\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ToDoList } from './components/ToDoList';\nimport { Context } from './context';\n\nexport function App() {\n  const [listOfToDos, setListOfToDos] = useState([]);\n  const [notCompletedToDos, setNotCompletedToDos] = useState([]);\n  const [newToDoTitle, setNewToDoTitle] = useState('');\n\n  useEffect(() => {\n    setNotCompletedToDos(\n      listOfToDos.filter(todo => todo.completed === false),\n    );\n  }, [listOfToDos]);\n\n  function addTodo(event) {\n    event.preventDefault();\n    setListOfToDos(prevState => [\n      ...listOfToDos,\n      { title: newToDoTitle, id: +new Date(), completed: false },\n    ]);\n    setNewToDoTitle('');\n  }\n\n  const changeTodoStatus = (todoId) => {\n    setListOfToDos(listOfToDos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeAllTodosStatus = (statusToSet) => {\n    setListOfToDos(listOfToDos.map(\n      todo => ({ ...todo, completed: statusToSet }),\n    ));\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        changeTodoStatus,\n      }}\n    >\n\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newToDoTitle}\n              onChange={event => setNewToDoTitle(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter' && newToDoTitle.trim().length > 0) {\n                  addTodo(event);\n                }\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n\n          {(\n            (notCompletedToDos.length === 0\n              && listOfToDos.length !== 0)\n            || (notCompletedToDos.length === listOfToDos.length\n                && listOfToDos.length !== 0)\n          ) && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={() => {\n                  if (notCompletedToDos.length === 0) {\n                    changeAllTodosStatus(false);\n                  } else {\n                    changeAllTodosStatus(true);\n                  }\n                }}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <ToDoList\n            listOfToDos={listOfToDos}\n          />\n\n        </section>\n\n        {listOfToDos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {notCompletedToDos.length}\n              {' '}\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a href=\"#/\" className=\"selected\">All</a>\n              </li>\n\n              <li>\n                <a href=\"#/active\">Active</a>\n              </li>\n\n              <li>\n                <a href=\"#/completed\">Completed</a>\n              </li>\n            </ul>\n\n            {(notCompletedToDos.length !== listOfToDos.length) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setListOfToDos(notCompletedToDos)}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        )}\n\n      </section>\n\n    </Context.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}